# 🌍 GlobeSwap

GlobeSwap is a Flask-based web application designed to connect travelers and locals through trip sharing and skill swapping. Users can create trip listings, offer or request specific skills (like language lessons for accommodation), and initiate connections via an internal interaction request system.

## 🚀 Features

* 👤 **User Management:** Secure registration, login, and profile management.
* ✈️ **Trips:** Full CRUD functionality (Create, Read, Update, Delete) for trip listings with start/end dates.
* 🔄 **Skill Swap:** Detailed one-to-one exchange mechanism for specific skills.
* 🤝 **Interactions:** Users can send and receive requests regarding a trip listing (Accept/Reject functionality).
* 🛠 **Database:** Powered by Flask-SQLAlchemy with migrations using Flask-Migrate.
* 🎨 **Templates:** Dynamic, responsive pages using Jinja2 and Bootstrap.

## 📂 Project Structure

```
GlobeSwap/
│── app.py              # Main Flask application and routes
│── models.py           # Database models (User, Trip, SkillSwap, Interaction)
│── migrations/         # Database migration files
│── templates/          # HTML templates (including CRUD forms)
│   ├── base.html       # Base template with navigation
│   ├── index.html      # Homepage
│   ├── login.html      # Authentication pages
│   ├── trips.html      # Trip management & viewing
│   └── interaction.html# Interaction request handling
│── static/             # CSS, JS, and images (Bootstrap is loaded via CDN)
│── assets/design/      # Includes Wireframes, Mockups, and Diagrams.
│── venv/               # Virtual environment
│── requirements.txt    # Python dependencies
└── README.md           # Project documentation
```

## ⚙️ Installation & Setup

### 1️⃣ Clone the Repository

```bash
git clone https://github.com/RaduScripnic/GlobeSwap
cd GlobeSwap
```

### 2️⃣ Create a Virtual Environment

```bash
python3 -m venv venv
source venv/bin/activate   # On Mac/Linux
venv\Scripts\activate      # On Windows
```

### 3️⃣ Install Dependencies

```bash
pip install -r requirements.txt
```

### 4️⃣ Set Up the Database

```bash
flask db init
flask db migrate -m "Initial migration"
flask db upgrade
```

### 5️⃣ Run the Application

```bash
python app.py
```

Visit [http://127.0.0.1:5000](http://127.0.0.1:5000) in your browser.

## 📜 Development Cycle

* Initial setup, database models, authentication, CRUD for Trips, SkillSwap, Interactions, validation, and deployment preparation.

## 🗄️ Data Models & Schema

### User

* id (PK)
* username, email (Unique)
* password\_hash
* created\_at

### Trip

* id (PK), destination
* start\_date, end\_date
* description
* is\_accommodation\_offer
* user\_id (FK)

### SkillSwap

* id (PK)
* skill\_offered, skill\_wanted
* trip\_id (FK, unique)

### Interaction

* id (PK), message, status
* trip\_id (FK), sender\_id (FK), recipient\_id (FK)

### Relationships

* User → Trip: One-to-Many
* Trip ↔ SkillSwap: One-to-One
* Trip → Interaction: One-to-Many
* Cascade: Deleting Trip deletes related SkillSwap and Interaction records.

## 🎨 UX Design & Responsiveness

* Mobile-first, Bootstrap grid, accessible color palette, icons for clarity.
* Wireframes and mockups in `assets/design/`.

## 🧪 Manual Testing

* Registration, Create/Read/Update/Delete Trip, Interactions workflow, Input validation.

## 🚀 Deployment

* Cloud deployment with secure environment variables, Procfile, and `requirements.txt`.

## 📚 Credits & Attribution

* Flask, SQLAlchemy, Flask-Migrate, Bootstrap.
* Original work by Radu Scripnic. External docs referenced for Flask and SQLAlchemy.
