# 🌍 GlobeSwap

**Author:** Radu Scripnic  
**Live URL:** [https://globeswap.onrender.com](https://globeswap.onrender.com)  
**Repository:** [https://github.com/RaduScripnic/GlobeSwap](https://github.com/RaduScripnic/GlobeSwap)  
**Project Plan:** [GlobeSwap Project Board](https://github.com/users/RaduScripnic/projects/5/views/1)

---

## 🧭 Overview

**GlobeSwap** is a Flask-based web application that connects travelers and locals through trip sharing and skill swapping.  
Users can create trip listings, offer or request specific skills, and interact with others for cultural exchange opportunities.  
The project demonstrates **CRUD functionality**, **database design**, and **deployment to the cloud**.

---

## 🚀 Features

- 👤 **User Management** — registration, login, and profile management.
- ✈️ **Trips CRUD** — create, read, update, and delete trip listings.
- 🔄 **Skill Swap** — offer or request skills linked to trips.
- 💬 **Interactions** — send and receive trip-related requests.
- 🗄️ **Database:** Flask-SQLAlchemy with Flask-Migrate for schema management.
- 🎨 **Templates:** Jinja2 and Bootstrap for a responsive UI.

---

## 🧱 Data Models & Schema

### **Entities**

| Model | Description | Key Fields |
|--------|--------------|------------|
| **User** | Registered traveler/local | id, username, email, password_hash |
| **Trip** | Travel listing with location & duration | id, destination, start_date, end_date, user_id |
| **SkillSwap** | Skill offered or requested | id, skill_offered, skill_wanted, trip_id |
| **Interaction** | Communication between users | id, message, status, trip_id, sender_id, recipient_id |

### **Relationships**
- User → Trip → Interaction (One-to-Many)
- Trip ↔ SkillSwap (One-to-One)
- Cascade delete enabled on Trip deletion

### **Entity Relationship Diagram (ERD)**
![Database Schema](assets/design/schema.png)

---

## 🎨 UX Design

- Mobile-first and responsive design using **Bootstrap grid system**
- Consistent color palette for accessibility (WCAG AA)
- Wireframes and mockups are located in `assets/design/`
- Navigation is clear and minimal, ensuring ease of use

---

## ⚙️ Installation & Setup

### 1️⃣ Clone the Repository
```bash
git clone https://github.com/RaduScripnic/GlobeSwap.git
cd GlobeSwap
```

### 2️⃣ Create and Activate Virtual Environment
```bash
python3 -m venv venv
source venv/bin/activate   # Mac/Linux
venv\Scripts\activate    # Windows
```

### 3️⃣ Install Dependencies
```bash
pip install -r requirements.txt
```

### 4️⃣ Set Up the Database
```bash
flask db init
flask db migrate -m "Initial migration"
flask db upgrade
```

### 5️⃣ Run the Application
```bash
python app.py
```
Visit 👉 [http://127.0.0.1:5000](http://127.0.0.1:5000)

---

## 🧭 Development Cycle

| Phase | Description |
|--------|--------------|
| 1️⃣ Setup | Flask configuration, routes, templates created |
| 2️⃣ Database | Models (User, Trip, SkillSwap, Interaction) implemented |
| 3️⃣ CRUD Logic | Added Create, Read, Update, Delete operations for Trips |
| 4️⃣ Authentication | Secure registration and login added |
| 5️⃣ UI Enhancements | Bootstrap styling and layout improvements |
| 6️⃣ Testing | Manual and validation testing performed |
| 7️⃣ Deployment | Finalized for Render cloud hosting |

---

## 🧪 Manual Testing

| Feature | Action | Expected Result | Actual Result | Screenshot |
|----------|--------|-----------------|----------------|-------------|
| **User Registration** | Create account | Redirect to dashboard | ✅ Works | ![Register](assets/testing/register.png) |
| **Login/Logout** | Enter credentials / logout | Session managed correctly | ✅ Works | ![Login](assets/testing/login.png) |
| **Create Trip** | Fill form & submit | New trip saved | ✅ Works | ![Trip Create](assets/testing/trip-create.png) |
| **View Trips** | Open /trips | All trips displayed | ✅ Works | ![Trips List](assets/testing/trip-list.png) |
| **Edit Trip** | Update trip details | Changes reflected | ✅ Works | ![Trip Edit](assets/testing/trip-edit.png) |
| **Delete Trip** | Delete button clicked | Trip removed | ✅ Works | ![Trip Delete](assets/testing/trip-delete.png) |
| **Skill Swap CRUD** | Add/edit skill exchange | Works as intended | ✅ Works | ![Skill Swap](assets/testing/skillswap.png) |
| **Interaction Requests** | Send message/request | Appears for recipient | ✅ Works | ![Interaction](assets/testing/interaction.png) |

All tests passed successfully on local and deployed versions.

---

## 🌐 Deployment

### **Render Deployment Process**
Deployed live at 👉 [https://globeswap.onrender.com](https://globeswap.onrender.com)

**Steps Taken:**
1. Final code pushed to [GitHub repo](https://github.com/RaduScripnic/GlobeSwap).
2. Created a **Render Web Service** connected to GitHub.
3. Added environment variables:
   - `SECRET_KEY`
   - `DATABASE_URL`
4. Added a `Procfile`:
   ```bash
   web: gunicorn app:app
   ```
5. Build and deploy logs verified — successful deployment.

**Deployment Verification:**
- CRUD functions tested successfully online.
- Console logs show no errors.
- Database persistence verified.

---

## 📋 Project Tracking

Project features, issues, and testing tasks were organized and tracked using:  
📅 [GitHub Project Board](https://github.com/users/RaduScripnic/projects/5/views/1)

---

## 📚 Credits & Attribution

- **Frameworks & Tools:** Flask, SQLAlchemy, Flask-Migrate, Bootstrap, Jinja2.
- **Hosting:** Render.
- **Inspiration & References:** Flask official documentation, Miguel Grinberg tutorials.
- **Original Work:** All logic and integration written by **Radu Scripnic**.
- **ERD & Diagrams:** Designed using Lucidchart.

---

## 🧾 License
This project is licensed under the **MIT License** — feel free to use and modify for educational purposes.

---
