# 🌍 GlobeSwap

**Author:** Radu Scripnic  
**Live URL:** [https://globeswap.onrender.com](https://globeswap.onrender.com)  
**Repository:** [https://github.com/RaduScripnic/GlobeSwap](https://github.com/RaduScripnic/GlobeSwap)  
**Project Plan:** [GlobeSwap Project Board](https://github.com/users/RaduScripnic/projects/5/views/1)

---

## 🧭 Overview

**GlobeSwap** is a Flask-based web application that connects travelers and locals through trip sharing and skill swapping.  
Users can create trip listings, offer or request specific skills, and interact with others for cultural exchange opportunities.  
The project demonstrates **CRUD functionality**, **database design**, and **deployment to the cloud**.

---

## 🚀 Features

- 👤 **User Management** — registration, login, and profile management.
- ✈️ **Trips CRUD** — create, read, update, and delete trip listings.
- 🔄 **Skill Swap** — offer or request skills linked to trips.
- 💬 **Interactions** — send and receive trip-related requests.
- 🗄️ **Database:** Flask-SQLAlchemy with Flask-Migrate for schema management.
- 🎨 **Templates:** Jinja2 and Bootstrap for a responsive UI.

---

## 🧱 Data Models & Schema

### **Entities**

| Model | Description | Key Fields |
|--------|--------------|------------|
| **User** | Registered traveler/local | id, username, email, password_hash |
| **Trip** | Travel listing with location & duration | id, destination, start_date, end_date, user_id |
| **SkillSwap** | Skill offered or requested | id, skill_offered, skill_wanted, trip_id |
| **Interaction** | Communication between users | id, message, status, trip_id, sender_id, recipient_id |

### **Relationships**
- User → Trip → Interaction (One-to-Many)
- Trip ↔ SkillSwap (One-to-One)
- Cascade delete enabled on Trip deletion

### **Entity Relationship Diagram (ERD)**
![Database Schema](assets/design/schema.png)

---

## 🎨 UX Design

- Mobile-first and responsive design using **Bootstrap grid system**
- Consistent color palette for accessibility (WCAG AA)
- Wireframes and mockups are located in `assets/design/`
- Navigation is clear and minimal, ensuring ease of use

---

## 🧭 UX & Design Documentation (Pass 1.1)

### 🎯 **Target Audience**
- Travelers seeking cultural exchange opportunities  
- Locals interested in sharing skills or hosting guests

### 🎨 **Design Principles**
- **Accessibility:** Meets WCAG AA contrast guidelines  
- **Responsiveness:** Bootstrap ensures proper scaling on all devices  
- **Consistency:** Color and layout uniform across pages  
- **Clarity:** Key sections (Trips, Interactions, Profile) always visible  

### 🧩 **Design Assets**
All visual design assets are located in the `/assets/design/` folder:
- `home-wireframe.png` – Home layout and navigation  
- `trip-list-wireframe.png` – List and detail page structure  
- `interaction-wireframe.png` – Message flow  
- `mobile-view-wireframe.png` – Responsive mobile layout  

![Wireframe Example](assets/design/home-wireframe.png)

### 🌈 **Color Palette**

| Use | Color | Hex |
|------|--------|------|
| Primary | Deep Blue | `#0d6efd` |
| Secondary | Teal | `#20c997` |
| Accent | Orange | `#fd7e14` |
| Background | White | `#ffffff` |
| Text | Charcoal | `#212529` |

### 🗺️ **Navigation Flow**
1. **Home** – Overview and signup  
2. **Trips** – Browse, create, or edit listings  
3. **Skill Swap** – Offer/request skills  
4. **Interactions** – View and respond to messages  
5. **Profile** – Manage user info and trips  

---

## ⚙️ Installation & Setup

### 1️⃣ Clone the Repository
```bash
git clone https://github.com/RaduScripnic/GlobeSwap.git
cd GlobeSwap
```

### 2️⃣ Create and Activate Virtual Environment
```bash
python3 -m venv venv
source venv/bin/activate   # Mac/Linux
venv\Scripts\activate      # Windows
```

### 3️⃣ Install Dependencies
```bash
pip install -r requirements.txt
```

### 4️⃣ Set Up the Database
```bash
flask db init
flask db migrate -m "Initial migration"
flask db upgrade
```

### 5️⃣ Run the Application
```bash
python app.py
```

Visit 👉 [http://127.0.0.1:5000](http://127.0.0.1:5000)

---

## 🧭 Development Cycle

| Phase | Description |
|--------|--------------|
| 1️⃣ Setup | Flask configuration, routes, templates created |
| 2️⃣ Database | Models (User, Trip, SkillSwap, Interaction) implemented |
| 3️⃣ CRUD Logic | Added Create, Read, Update, Delete operations for Trips |
| 4️⃣ Authentication | Secure registration and login added |
| 5️⃣ UI Enhancements | Bootstrap styling and layout improvements |
| 6️⃣ Testing | Manual and validation testing performed |
| 7️⃣ Deployment | Finalized for Render cloud hosting |

---

## 🧪 Manual Testing

| Feature | Action | Expected Result | Actual Result | Screenshot |
|----------|--------|-----------------|----------------|-------------|
| **User Registration** | Create account | Redirect to dashboard | ✅ Works | ![Register](assets/testing/register.png) |
| **Login/Logout** | Enter credentials / logout | Session managed correctly | ✅ Works | ![Login](assets/testing/login.png) |
| **Create Trip** | Fill form & submit | New trip saved | ✅ Works | ![Trip Create](assets/testing/trip-create.png) |
| **View Trips** | Open /trips | All trips displayed | ✅ Works | ![Trips List](assets/testing/trip-list.png) |
| **Edit Trip** | Update trip details | Changes reflected | ✅ Works | ![Trip Edit](assets/testing/trip-edit.png) |
| **Delete Trip** | Delete button clicked | Trip removed | ✅ Works | ![Trip Delete](assets/testing/trip-delete.png) |
| **Skill Swap CRUD** | Add/edit skill exchange | Works as intended | ✅ Works | ![Skill Swap](assets/testing/skillswap.png) |
| **Interaction Requests** | Send message/request | Appears for recipient | ✅ Works | ![Interaction](assets/testing/interaction.png) |

All tests passed successfully on local and deployed versions.

---

## 🧪 Testing Documentation (Pass 1.5)

A structured manual testing process was performed to verify **functionality, usability, responsiveness, and data integrity**.

### 🔍 **Testing Summary**
| Test ID | Area | Description | Expected Result | Outcome |
|----------|------|-------------|-----------------|----------|
| T1 | Registration | Create new user | Redirected to dashboard | ✅ Passed |
| T2 | Login/Logout | Manage session | User logged in/out correctly | ✅ Passed |
| T3 | Trip CRUD | Create/Edit/Delete | All actions reflected in UI | ✅ Passed |
| T4 | Skill Swap | Offer/request skill | Linked correctly to trip | ✅ Passed |
| T5 | Interaction | Send message | Saved in DB, visible to recipient | ✅ Passed |
| T6 | Responsive Layout | Resize window | Layout adapts correctly | ✅ Passed |
| T7 | Validation | Invalid input | Error shown, no crash | ✅ Passed |

### ⚙️ **Bug Tracking**
| Bug | Cause | Fix | Result |
|------|-------|-----|--------|
| Trip not saving | Missing required field | Added validation in Flask form | ✅ Fixed |
| Message not appearing | Wrong model relation | Updated `foreign key` mapping | ✅ Fixed |
| Mobile layout issue | Missing Bootstrap classes | Added `.col-12` and `.text-center` | ✅ Fixed |

### ✅ **Validation Evidence**
- HTML and CSS validated using W3C and Jigsaw validators  
- Python code verified with `flake8` (PEP8 compliant)  
- All console and database tests pass in production

---

## 🌐 Deployment

### **Render Deployment Process**
Deployed live at 👉 [https://globeswap.onrender.com](https://globeswap.onrender.com)

**Steps Taken:**
1. Final code pushed to [GitHub repo](https://github.com/RaduScripnic/GlobeSwap)
2. Connected GitHub repo to **Render Web Service**
3. Added environment variables:
   - `SECRET_KEY`
   - `DATABASE_URL`
4. Added a `Procfile`:
   ```bash
   web: gunicorn app:app
   ```
5. Verified deployment logs and tested live app

**Verification:**
- CRUD functions operate as expected  
- Database persistence confirmed  
- No console or build errors  
- DEBUG mode disabled in production  

---

## 📋 Project Tracking

All features, issues, and tasks were organized and tracked using:  
📅 [GitHub Project Board](https://github.com/users/RaduScripnic/projects/5/views/1)

---

## 📚 Credits & Attribution

- **Frameworks & Tools:** Flask, SQLAlchemy, Flask-Migrate, Bootstrap, Jinja2  
- **Hosting:** Render  
- **Inspiration:** Flask Docs, Miguel Grinberg tutorials  
- **Original Work:** All code written by **Radu Scripnic**  
- **ERD & Design:** Created using Lucidchart  

---

## 🧾 License
This project is licensed under the **MIT License** — free to use and modify for educational purposes.

---
