# 🌍 GlobeSwap

GlobeSwap is a Flask-based web application designed to connect travelers and locals through **trip sharing** and **skill swapping**.  
Users can create trips, exchange skills, and build connections across the globe.  

---

## 🚀 Features
- 👤 **User Management**: Add and manage users with validation.
- ✈️ **Trips**: Create and view trips with start/end dates.
- 🔄 **Skill Swap**: Offer and request skills for cultural exchange.
- 🛠 **Database**: Powered by **Flask-SQLAlchemy** with migrations using **Flask-Migrate**.
- 🎨 **Templates**: Dynamic pages using **Jinja2** and Bootstrap.

---

## 📂 Project Structure
```
GlobeSwap/
│── app.py              # Main Flask app
│── models.py           # Database models (User, Trip, SkillSwap)
│── migrations/         # Database migration files
│── templates/          # HTML templates
│   ├── base.html       # Base template with navigation
│   ├── index.html      # Homepage
│   ├── users.html      # User management
│   ├── trips.html      # Trips management
│   └── skillswap.html  # Skill swap management
│── static/             # CSS, JS, and images (if needed)
│── venv/               # Virtual environment
│── requirements.txt    # Python dependencies
└── README.md           # Project documentation
```

---

## ⚙️ Installation & Setup

### 1️⃣ Clone the Repository
```bash
git clone https://github.com/RaduScripnic/GlobeSwap
cd GlobeSwap
```

### 2️⃣ Create a Virtual Environment
```bash
python3 -m venv venv
source venv/bin/activate   # On Mac/Linux
venv\Scripts\activate      # On Windows
```

### 3️⃣ Install Dependencies
```bash
pip install -r requirements.txt
```

### 4️⃣ Set Up the Database
```bash
flask db init
flask db migrate -m "Initial migration"
flask db upgrade
```

### 5️⃣ Run the Application
```bash
python app.py
```

Visit 👉 **http://127.0.0.1:5000** in your browser.

---

## 📝 Daily Workflow
Each time you want to work on GlobeSwap:
```bash
cd GlobeSwap
source venv/bin/activate
python app.py
```

---

## 🛠️ Development Cycle

The project was developed iteratively, with progress tracked through commits. Key stages included:

1. **Initial Setup**
   - Scaffold project with Flask.
   - Commit: `initial setup with app.py and virtual environment`

2. **Database Models**
   - Added models for `User`, `Trip`, and `SkillSwap`.
   - Commit: `add User, Trip, and SkillSwap models`

3. **Migrations**
   - Configured Flask-Migrate for database schema changes.
   - Commit: `setup Flask-Migrate and create initial migration`

4. **Routes & Templates**
   - Added CRUD routes and Jinja2 templates for users, trips, and skill swaps.
   - Commit: `add templates and CRUD routes`

5. **Testing**
   - Manual testing of all CRUD operations.
   - Commit: `fix validation errors and add error handling`

6. **Deployment**
   - Prepared app for production deployment (Heroku/Render).
   - Commit: `add Procfile and update config for deployment`

### 📜 Example Commit Log
| Commit Hash | Message                                     | Stage              |
|-------------|---------------------------------------------|--------------------|
| a1b2c3d     | Initial setup with app.py scaffold          | Initial Setup      |
| b2c3d4e     | Add database models                         | Database Models    |
| c3d4e5f     | Setup Flask-Migrate and first migration     | Migrations         |
| d4e5f6g     | Add templates and CRUD routes               | Routes & Templates |
| e5f6g7h     | Fix validation errors and add error handling| Testing            |
| f6g7h8i     | Deployment config and Procfile added        | Deployment         |

---

## 🗄️ Data Model & Schema

### Tables
- **User**
  - `id`: Integer, primary key
  - `name`: String, required
  - `email`: String, unique
- **Trip**
  - `id`: Integer, primary key
  - `user_id`: Foreign key → User
  - `destination`: String
  - `start_date`, `end_date`: Date
- **SkillSwap**
  - `id`: Integer, primary key
  - `user_id`: Foreign key → User
  - `skill_offered`: String
  - `skill_requested`: String

### Relationships
- A User can have many Trips.
- A User can have many SkillSwap entries.

---

## 🧪 Testing

### Manual Tests
| Test | Input | Expected Result | Actual Result | Status |
|------|-------|-----------------|---------------|--------|
| Add User | name="Alice" | User added to DB | ✅ User added | Pass |
| Add Trip | user_id=1, destination="Paris" | Trip saved | ✅ Trip saved | Pass |
| Add SkillSwap | user_id=1, offered="Cooking", requested="Photography" | Saved | ✅ Saved | Pass |
| Invalid User | missing email | Error message | ✅ Error shown | Pass |

Screenshots available in `assets/screenshots/`.

### Validation
- HTML, CSS, JS validated via W3C tools.  
- Python code checked with `flake8`.  
- No console errors.

---

## 🚀 Deployment

The app is deployed on **Heroku/Render**:  
👉 [Live Demo](https://globeswap.onrender.com/)

### Steps
1. Add `Procfile` and `requirements.txt`.
2. Set environment variables (`DATABASE_URL`, `SECRET_KEY`) in Heroku/Render dashboard.
3. Push to main branch → deploys automatically.
4. Confirm `DEBUG = False` in production.

---

## 📚 Credits & Attribution

To clearly separate original and external sources:

- **Libraries**  
  - Flask, Flask-SQLAlchemy, Flask-Migrate (Flask ecosystem).  
  - Bootstrap (frontend styling).  

- **External Sources**  
  - Flask official docs: [https://flask.palletsprojects.com](https://flask.palletsprojects.com)  
  - SQLAlchemy docs: [https://docs.sqlalchemy.org](https://docs.sqlalchemy.org)  

- **Original Work**  
  - App design, models, CRUD logic, and templates created by *Radu Scripnic*.  
  - Random city suggestion feature and user workflow are original implementations.

---

## 📌 Project Management
We use **GitHub Projects** to track tasks, bugs, and features:  
👉 [GlobeSwap Project Board](https://github.com/users/RaduScripnic/projects/5/views/1)

---

## 📦 Requirements
Here are the main dependencies (already included in `requirements.txt`):
```txt
Flask==3.1.1
Flask-SQLAlchemy==3.1.1
Flask-Migrate==4.0.7
SQLAlchemy==2.0.34
Jinja2==3.1.4
Werkzeug==3.0.3
```

Install them via:
```bash
pip install -r requirements.txt
```

---

## 🤝 Contributing
1. Fork the repo  
2. Create a feature branch (`git checkout -b feature-name`)  
3. Commit your changes (`git commit -m "Add feature"`)  
4. Push to branch (`git push origin feature-name`)  
5. Open a Pull Request  

---

## 📜 License
This project is licensed under the **MIT License** — feel free to use and modify.  

---
